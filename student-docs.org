# -*- mode: org -*-
#+title: Track Documentation
#+options: toc:nil

* ABOUT 

TODO


* TESTS

** Terminal (jconsole)

Make sure you have used J's package manager to install J's unit
testing library. This can be done by entering ~jconsole~ at the
command line followed by these commands:

#+BEGIN_SRC j :session :exports code
load'pacman'
'update'jpkg''
'install'jpkg'general/unittest'
#+END_SRC

- To run the tests go to the directory for the given exercism
  problem. Start a ~jconsole~ session. Enter
  ~require'general/unittest.ijs'~.
- Develop your solution in ~problem.ijs~ (eg ~hello-world.ijs~).
- Whenever you'd like to test the program, run ~unittest'test.ijs'~.


* LEARNING

** Books

- [[https://www.jsoftware.com/help/primer/contents.htm][J Primer]] a tour of ~J~ and great starting point that avoids being
  overly concise and focused on the complex aspects of the language.
- [[https://www.jsoftware.com/help/learning/contents.htm][Learning J]] a more in depth tour of ~J~ suitable for beginners as
  well as experienced programmers.
- [[https://www.jsoftware.com/help/jforc/contents.htm][J For C Programmers]] a more detailed introduction to ~J~ assuming
  familiarity with ~C~.
- [[https://www.jsoftware.com/help/phrases/contents.htm][J Phrases]] a collection of ~J~ sentences and phrases. Helpful for
  learning ~J~ idioms, developing ~J~ reading comprehension, and
  looking up approaches to common tasks.
- [[https://www.jsoftware.com/help/dictionary/contents.htm][J Dictionary]] ~J~ thourgh sessions, covering a good breadth of the
  language.

These are available in HTML on the net and also are included with your
~J~ system when you download it. Another great book (for purchase) is
[[https://books.google.ca/books?id=Qs2kCwAAQBAJ&printsec=frontcover&source=gbs_ge_summary_r&cad=0#v=onepage&q&f=false][Fractals Visualization and J]] which emphasises using ~J~ to explore and
visualize various mathematical concepts.


* RESOURCES

** NuVoc

The [[https://code.jsoftware.com/wiki/NuVoc][NuVoc]] is the definitive J reference. It is a highly concise and
information dense overview of the J primitives and language.

** Community

- https://code.jsoftware.com/wiki/System/Forums mailing lists
- https://www.reddit.com/r/apljk/ subreddit
- [[http://webchat.freenode.net/?channels=jsoftware][#jsoftware]] irc channel

** Rosetta Code

Many rosetta tasks have ~J~ solutions. It's a good resource to find J
programs to study. [[https://rosettacode.org/wiki/Sudoku#J][Here]] is a sudoku solver by Roger Hui.
  

* INSTALLATION

Refer to [[https://code.jsoftware.com/wiki/System/Installation][System/Installation]] for instructions on how to get things set
up on your system.

After installing, I'd suggest using the package manager (called
~pacman~) to grab available addons. To do this, start a ~J~ console
session by typing ~jconsole~. Then enter:

#+BEGIN_SRC j :session :exports code
load 'pacman'
'update'jpkg''
'install' jpkg '*'
#+END_SRC

To run the tests you'll need to run ~'install'jpkg'general/unittest'~
at a minimum. The rest of the addons are highly useful and include
frameworks for working with graphics, websockets, and much else and
don't take up much space (should be around 40Mb).
