# -*- mode: org -*-
#+title: Track Documentation
#+options: toc:nil

* ABOUT 

#+BEGIN_VERSE
 APL is a mistake, carried through to perfection. It is the language of the future for the programming techniques of the past: it creates a new generation of coding bums.

    ---E.W. Dijkstra
#+END_VERSE

J is a strange language that can challenge how you think about
building programs. It talks in terms of speech -- the parts of which
include nouns, verbs, adverbs, conjunctions, gerunds, copulas, and so
on. It borrows terms from music and chemistry where verbs, adverbs,
and conjunctions are monads or dyads depending on how they bond to
their operands. J is also extremely concise; useful programs can be
expressed in very few keystrokes.

* TESTS
** Terminal (jconsole)

The way the tracks tests are set up is hoped to be as simple as
possible. If you're working an exercise, say ~hamming.ijs~ here's how
the work should flow. Edit ~hamming.ijs~ writing out your
solution. Interactively build it up by first typing

#+begin_src j :session :exports code
NB. your j terminal binary may be ijconsole (eg. on Debian)
jconsole 'hamming.ijs' NB. start a J console session with definitions loaded hamming.ijs
#+end_src

From inside the J console, reload by typing 

#+BEGIN_SRC j :session :exports code
   load 'hamming.ijs'
#+END_SRC

from inside the J console. To run the tests -- after you have loaded
your solution -- type

#+BEGIN_SRC j :session :exports code
   0!:2 < 'test.ijs'
#+END_SRC

The verb (aka function) [[https://code.jsoftware.com/wiki/Vocabulary/Foreigns#m0][0!:2]] is an example of something called a
/foreign/. It loads its argument and treats each line of it as an
assertion which will be true or false (1 or 0) and prints out the line
and the result of checking the assertion. Another option to test is
using ~0!:3~ which won't print for each line but will return 1 if all
assertions pass or 0 if something doesn't. ~0!:2~ and ~0!:3~ expect
boxed strings as their arguments, that's the purpose of ~<~ above.

** Recap

- Head to the problem directory (eg ~~/Exercism/hello-world~).
- Start a ~jconsole~ session (eg by typing ~jconsole~ or ~ijconsole~)
  in a terminal.
- Load your solution file (eg ~load 'hello-world.ijs'~)
- Test your solution by typing ~0!:2 < 'test.ijs'~.


* LEARNING

** Books

- [[https://www.jsoftware.com/help/primer/contents.htm][J Primer]] a tour of ~J~ and great starting point that avoids being
  overly concise and focused on the complex aspects of the language.
- [[https://www.jsoftware.com/help/learning/contents.htm][Learning J]] a more in depth tour of ~J~ suitable for beginners as
  well as experienced programmers.
- [[https://www.jsoftware.com/help/jforc/contents.htm][J For C Programmers]] a more detailed introduction to ~J~ assuming
  familiarity with ~C~.
- [[https://www.jsoftware.com/help/phrases/contents.htm][J Phrases]] a collection of ~J~ sentences and phrases. Helpful for
  learning ~J~ idioms, developing ~J~ reading comprehension, and
  looking up approaches to common tasks.
- [[https://www.jsoftware.com/help/dictionary/contents.htm][J Dictionary]] ~J~ thourgh sessions, covering a good breadth of the
  language.

These are available in HTML on the net and also are included with your
~J~ system when you download it. Another great book (for purchase) is
[[https://books.google.ca/books?id=Qs2kCwAAQBAJ&printsec=frontcover&source=gbs_ge_summary_r&cad=0#v=onepage&q&f=false][Fractals Visualization and J]] which emphasises using ~J~ to explore and
visualize various mathematical concepts.


* RESOURCES

** NuVoc

The [[https://code.jsoftware.com/wiki/NuVoc][NuVoc]] is the definitive J reference. It is a highly concise and
information dense overview of the J primitives and language.

** Community

- https://code.jsoftware.com/wiki/System/Forums mailing lists
- https://www.reddit.com/r/apljk/ subreddit
- [[http://webchat.freenode.net/?channels=jsoftware][#jsoftware]] irc channel

** Rosetta Code

Many rosetta tasks have ~J~ solutions. It's a good resource to find J
programs to study. [[https://rosettacode.org/wiki/Sudoku#J][Here]] is a sudoku solver by Roger Hui.
  

* INSTALLATION

Refer to [[https://code.jsoftware.com/wiki/System/Installation][System/Installation]] for instructions on how to get things set
up on your system.

After installing, I'd suggest using the package manager (called
~pacman~) to grab available addons. This includes fun bits like
plotting, graphics, image manipulation, and much else. To do this, you
can start a ~J~ console session by typing ~jconsole~ then enter:

#+BEGIN_SRC j :session :exports code
load 'pacman'
'update'jpkg''
'install' jpkg '*'
#+END_SRC
