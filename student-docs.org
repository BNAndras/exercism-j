# -*- mode: org -*-
#+title: Track Documentation
#+options: toc:nil

* Tests

** Terminal (jconsole)

Make sure you have used J's package manager to install J's unit
testing library. This can be done by entering ~jconsole~ at the
command line followed by these commands:

#+BEGIN_SRC j :session :exports code
load'pacman'
'update'jpkg''
'install'jpkg'general/unittest'
#+END_SRC

- To run the tests go to the directory for the given exercism
  problem. Start a ~jconsole~ session. Enter
  ~require'general/unittest.ijs'~.
- Develop your solution in ~problem.ijs~ (eg ~hello-world.ijs~).
- Whenever you'd like to test the program, run ~unittest'test.ijs'~.


* Resources

*** Books

There are several books written by experienced J programmers that I
highly recommend exploring.

- [[https://www.jsoftware.com/help/primer/contents.htm][J Primer]] is a tour of J. It's a great starting point that avoids
  being overly concise and focused on the complex aspects of the
  language.
- [[https://www.jsoftware.com/help/learning/contents.htm][Learning J]] is another great introduction and overview of J. It goes
  more into detail than the *J Primer* does, but is still suitable for
  starting out.
- [[https://www.jsoftware.com/help/jforc/contents.htm][J For C Programmers]] introduces J assuming a background in ~C~. It
  contrasts ~C~ approaches with ~J~ ones and teaches more features of
  ~J~ than the previous two books. It covers more real world topics
  and introduces some of ~J~'s great facilities for plotting.
- [[https://www.jsoftware.com/help/phrases/contents.htm][J Phrases]] is a collection of ~J~ sentences and phrases. It isn't
  really a high level introduction. Instead, it presents a wide range
  of ~J~ programs and idioms which are great for learning how to read
  J and seeing it used for practical tasks.
- [[https://www.jsoftware.com/help/dictionary/contents.htm][J Dictionary]] presents ~J~ thourgh example sessions. It has many
  exercises and is designed to be an accessible introduction.

These are available in HTML on the net and also are included with your
~J~ system when you download it. Another great book (for purchase) is
[[https://books.google.ca/books?id=Qs2kCwAAQBAJ&printsec=frontcover&source=gbs_ge_summary_r&cad=0#v=onepage&q&f=false][Fractals Visualization and J]] which emphasis using ~J~ to explore and
visualize various mathematical concepts.

*** NuVoc

The [[https://code.jsoftware.com/wiki/NuVoc][NuVoc]] is the definitive J reference. It is a highly concise and
information dense overview of the J primitives, which is perfect once
you have found your bearings, but is hard to navigate at first. It's
overwhelming to have the whole collection laid out out on one page and
it's not always easy to know where to look.

Nonetheless, I strongly recommend keeping it in mind and using it to
quickly recall useful primitives like square/power ~*:~ or Matrix
inverse/divide ~%.~ when writing your programs or reading other's.

*** Rosetta Code

Many rosetta tasks have ~J~ solutions. It's a good resource to find J
programs to study. [[https://rosettacode.org/wiki/Sudoku#J][Here]] is a sudoku solver by Roger Hui.
  

* Installing J

Refer to [[https://code.jsoftware.com/wiki/System/Installation][System/Installation]] for instructions on how to get things set
up on your system.

After installing, I'd suggest using the package manager (called
~pacman~) to grab available addons. To do this, start a ~J~ console
session by typing ~jconsole~. Then enter:

#+BEGIN_SRC j :session :exports code
load 'pacman'
'update'jpkg''
'install' jpkg '*'
#+END_SRC

To run the tests you'll need to run ~'install'jpkg'general/unittest'~
at a minimum. The rest of the addons are highly useful and include
frameworks for working with graphics, websockets, and much else and
don't take up much space (should be around 40Mb).
