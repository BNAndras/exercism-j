# -*- mode: org -*-

#+title: J Track Documentation
#+options: toc:nil

* Contributing

TBD

* TBD

TBD

* Student facing doc files.

** Resources

*** Books

There are several books written by experienced J programmers that I
highly recommend exploring.

- [[https://www.jsoftware.com/help/primer/contents.htm][J Primer]] is a tour of J. It's a great starting point that avoids
  being overly concise and focused on the complex aspects of the
  language.
- [[https://www.jsoftware.com/help/learning/contents.htm][Learning J]] is another great introduction and overview of J. It goes
  more into detail than the *J Primer* does, but is still suitable for
  starting out.
- [[https://www.jsoftware.com/help/jforc/contents.htm][J For C Programmers]] introduces J assuming a background in ~C~. It
  contrasts ~C~ approaches with ~J~ ones and teaches more features of
  ~J~ than the previous two books. It covers more real world topics
  and introduces some of ~J~'s great facilities for plotting.
- [[https://www.jsoftware.com/help/phrases/contents.htm][J Phrases]] is a collection of ~J~ sentences and phrases. It isn't
  really a high level introduction. Instead, it presents a wide range
  of ~J~ programs and idioms which are great for learning how to read
  J and seeing it used for practical tasks.
- [[https://www.jsoftware.com/help/dictionary/contents.htm][J Dictionary]] is similar to *J Phrases* in that it's more descriptive
  and example-based than the other books. It has many helpful
  exercises as well.

These are available in HTML on the net and also are included with your
~J~ system when you download it. Another great book (for purchase) is
[[https://books.google.ca/books?id=Qs2kCwAAQBAJ&printsec=frontcover&source=gbs_ge_summary_r&cad=0#v=onepage&q&f=false][Fractals Visualization and J]] which emphasis using ~J~ to explore and
visualize various mathematical concepts.

*** NuVoc

The [[https://code.jsoftware.com/wiki/NuVoc][NuVoc]] is the definitive J reference. It is a highly concise and
information dense overview of the J primitives, which is perfect once
you have found your bearings, but is hard to navigate at first. It's
overwhelming to have the whole collection laid out out on one page and
it's not always easy to know where to look.

Nonetheless, I strongly recommend keeping it in mind and using it to
quickly recall useful primitives like square/power ~*:~ or Matrix
inverse/divide ~%.~ when writing your programs or reading other's.

*** Rosetta Code

Many rosetta tasks have ~J~ solutions. It's a good resource to find J
programs to study.

Some solutions contributed by Roger Hui himself:

- [[https://rosettacode.org/wiki/Forward_difference#J][Forward Difference]]
- [[https://rosettacode.org/wiki/Sorting_algorithms/Quicksort#J][Quick Sort]]
- [[https://rosettacode.org/wiki/Sudoku#J][Sudoku]]
- [[https://rosettacode.org/wiki/FizzBuzz#J][FizzBuzz]]


** Installing J

J available accross a wide variety of operating systems including
Windows, macOS, GNU/Linux, Android, Raspberry Pi, and iOS. The core ~J
Engine~ is a shared library that interprets ~J~ programs. There are a
number of ~J front ends~ including the terminal based ~jconsole~, a
browser based ide ~JHS~, and a ~Qt~-based ide.

Please refer to [[https://code.jsoftware.com/wiki/System/Installation][System/Installation]] for instructions on how to get
things set up on your system.

After installing, I'd suggest using the package manager (called
~pacman~) to grab available addons. These include facilities for
testing, working with graphics, images, json, linear algebra,
interfacing with other languages including python, r, java, and much
else. The whole of it about 40Mb.

To do this, start a ~J~ console session using ~jconsole~ 

#+BEGIN_SRC j :session :exports code
load 'pacman'
'install' jpkg '*'
#+END_SRC

Caution: the ~jconsole~ name can conflict with a java performance
monitor, in which case it's best to rename ~jconsole~ to ~ijconsole~.


** J Snippet

Showing off J for track code snippet:

#+BEGIN_SRC j :session :exports code :tangle docs/SNIPPET.txt
floyd_warshall=: <./ .+ ~ ^: _
page_rank=: ([: %. =@i.@#@] - *) +/ .* ((]$-.@[%])#@])
game_of_life=: (3=])`(e.&3 4)@.["0 0[:+/^:2(,"0/~i:1)&(|.!.0)
#+END_SRC
